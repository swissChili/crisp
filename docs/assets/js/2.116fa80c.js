(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{143:function(t,e,a){"use strict";a.r(e);var r=a(0),s=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"developer-documentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#developer-documentation","aria-hidden":"true"}},[t._v("#")]),t._v(" Developer Documentation")]),a("h2",{attrs:{id:"math"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#math","aria-hidden":"true"}},[t._v("#")]),t._v(" Math")]),a("h3",{attrs:{id:"eq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eq","aria-hidden":"true"}},[t._v("#")]),a("code",[t._v("eq")])]),a("p",[t._v("Checks if arguments are equal.")]),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[eq: 1 1 1]\n#=> true\n[eq: 2 2 3]\n#=> false\n")])])]),a("h3",{attrs:{id:"add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add","aria-hidden":"true"}},[t._v("#")]),a("code",[t._v("add")])]),a("p",[t._v("Adds arguments together. Arguments must be numbers.")]),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[add: 1 2 3]\n#=> 6\n[add: 1.5 21]\n#=> 22.5\n")])])]),a("h3",{attrs:{id:"sub-mult-div"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sub-mult-div","aria-hidden":"true"}},[t._v("#")]),a("code",[t._v("sub")]),t._v(", "),a("code",[t._v("mult")]),t._v(", "),a("code",[t._v("div")])]),a("p",[t._v("All do basically what their names says. Each takes 2 or more numbers\nas arguments and returns another number")]),a("h2",{attrs:{id:"logic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logic","aria-hidden":"true"}},[t._v("#")]),t._v(" Logic")]),a("h3",{attrs:{id:"if"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if","aria-hidden":"true"}},[t._v("#")]),a("code",[t._v("if")])]),a("p",[t._v("Takes exactly three arguments. Evaluates the first, if it is true, it\nevaluates and returns the second. Otherwise, the third.")]),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('[if: true\n\t[print: "Is True"]\n\t[print: "Is False"]]\n#=> Is True\n')])])]),a("p",[t._v("Example demonstrating return:")]),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[let result:\n\t[if: true\n\t\t1\n\t\t2]]\n[print: result]\n#=> 1\n")])])]),a("h2",{attrs:{id:"io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io","aria-hidden":"true"}},[t._v("#")]),t._v(" IO")]),a("h3",{attrs:{id:"print"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#print","aria-hidden":"true"}},[t._v("#")]),a("code",[t._v("print")])]),a("p",[t._v("Prints it's arguments, evaluated to the screen.")]),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('[print: "Hello, World" 1 2.0]\n#=> Hello, World 1.0 2.0\n')])])]),a("h3",{attrs:{id:"debug"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debug","aria-hidden":"true"}},[t._v("#")]),a("code",[t._v("debug")])]),a("p",[t._v("Prints it's arguments unevaluated to the screen. In other words, this prints\nthe AST that represents it's arguments. This is printed in Clojure form. If\nit prooves useful JSON output may be implemented.")])])}],!1,null,null,null);e.default=s.exports}}]);