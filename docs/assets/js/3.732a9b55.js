(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{144:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"guide"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#guide","aria-hidden":"true"}},[t._v("#")]),t._v(" Guide")]),s("p",[t._v("Crisp is a loosely functional, interpreted programming language inspired\nby Objective-C, Lisp, JavaScript, and Haskell. This document aims to be\na simple introduction to the language, and it's implementation.")]),s("h2",{attrs:{id:"installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installation","aria-hidden":"true"}},[t._v("#")]),t._v(" Installation")]),s("p",[s("a",{attrs:{href:"/crisp/crisp.jar"}},[t._v("Download the jar")]),t._v(", or build from source with")]),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ lein uberjar\n$ java -jar target/crisp-0.1.0-standalone.jar\n")])])]),s("h2",{attrs:{id:"basic-syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-syntax","aria-hidden":"true"}},[t._v("#")]),t._v(" Basic Syntax")]),s("p",[t._v("Crisp uses square brackets religiously. They are used for function calls,\nand method calls on objects.")]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("Will print "),s("code",[t._v("hello, world")]),t._v(" to the screen. This is calling the "),s("code",[t._v("print")]),t._v(" function\nwith one argument, a string. It is important to note that arguments, like\neverything in crisp, are evaluated lazily. This means that it is only evaluated\nonce it is needed, saving some time up front.")]),s("h2",{attrs:{id:"variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#variables","aria-hidden":"true"}},[t._v("#")]),t._v(" Variables")]),s("p",[t._v("Variables in Crisp are immutable, which means you can't change theri value after\nyou create them. Variables are created with the "),s("code",[t._v("let")]),t._v(" function.")]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("let name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jeff"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> Hello Jeff")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("let name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bob"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> Runtime error")]),t._v("\n")])])]),s("h2",{attrs:{id:"basic-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-types","aria-hidden":"true"}},[t._v("#")]),t._v(" Basic Types")]),s("p",[t._v("Crisp has most of the types you're probably used to from any other language.\nThere are slight exceptions with how some of them function because of the lazy\nnature of the language.")]),s("h3",{attrs:{id:"numbers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#numbers","aria-hidden":"true"}},[t._v("#")]),t._v(" Numbers")]),s("p",[t._v("Numbers can be written literally as you'd expect: "),s("code",[t._v("123")]),s("code",[t._v("1.23")]),s("code",[t._v("0.123")]),t._v("\nall work as you would expect. Integers are stored as 32 bit signed ints, and\ndecimals as 64 bit floats.")]),s("h3",{attrs:{id:"strings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strings","aria-hidden":"true"}},[t._v("#")]),t._v(" Strings")]),s("p",[t._v("Like most lisps, strings must be double-quoted. These are stored internally\nas Clojure strings, so they support UTF-8 natively. "),s("code",[t._v('"This is a string"')]),t._v(".")]),s("h3",{attrs:{id:"booleans"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#booleans","aria-hidden":"true"}},[t._v("#")]),t._v(" Booleans")]),s("p",[t._v("Crisp booleans work exactly as expected. Anything except "),s("code",[t._v("nil")]),t._v(", "),s("code",[t._v("false")]),t._v(", and\n0 is truthy.")]),s("h3",{attrs:{id:"lambdas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambdas","aria-hidden":"true"}},[t._v("#")]),t._v(" Lambdas")]),s("p",[t._v("Lambdas are an integral part of this language. Being functional (and lazy), functions\ncan be passed as arguments to functions, and manipulated the same way as other data.")]),s("p",[t._v("The lambda syntax is as follows:")]),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("(arg0 arg1 arg2): {\n\t# lambda body\n\t[print: arg0]\n\t# arg1 and 2 are not accessed, so are not\n\t# evaluated.\n}\n")])])]),s("p",[t._v("Function calls are also lazily evaluated, which means passing a function call as an\nargument to a function will not evaluate that function until it is accessed in the\nfunction it is passed to. This makes things like this possible:")]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("let foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"before call"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\tfunc\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"after call"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function called"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Output:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   before call")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   function called")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   after call")]),t._v("\n")])])])])}],!1,null,null,null);a.default=e.exports}}]);